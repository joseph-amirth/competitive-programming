template <typename T, typename F = function<T(const T&, const T&)>> class SegmentTree {
public:
    int n;
    vector<T> t, lazy;
    vector<bool> marked;
    F f;
    SegmentTree() : n(), t(), f(), lazy(), marked() {}
    SegmentTree(const T arr[], int _n, F func = plus<T>()) { build(arr, _n, func); }
    SegmentTree(const vector<T> &v, F func = plus<T>()) { build(v, func); }

    void build(const T arr[], int _n, F func) {
        n = _n;
        f = move(func);
        t.resize(4 * n + 4);
        lazy.resize(4 * n + 4);
        marked.resize(4 * n + 4);

        function<void(const T[], int, int, int)> build = [&] (const T arr[], int i, int l, int r) {
            if (l == r) {
                t[i] = arr[l];
                return;
            }

            int mid = l + (r - l) / 2;
            build(arr, i << 1, l, mid);
            build(arr, i << 1 | 1, mid + 1, r);

            t[i] = f(t[i << 1], t[i << 1 | 1]);
        };
        build(arr, 1, 0, n - 1);
    }

    void build(const vector<T>& v, F func) {
        n = v.size();
        f = move(func);
        t.resize(4 * n + 4);
        lazy.resize(4 * n + 4);
        marked.resize(4 * n + 4);

        function<void(const vector<T>&, int, int, int)> build = [&] (const vector<T>& v, int i, int l, int r) {
            if (l == r) {
                t[i] = v[l];
                return;
            }

            int mid = l + (r - l) / 2;
            build(v, i << 1, l, mid);
            build(v, i << 1 | 1, mid + 1, r);

            t[i] = f(t[i << 1], t[i << 1 | 1]);
        };
        build(v, 1, 0, n - 1);
    }

    void push (int x, int l, int r) {
        if (marked[x]) {
            
        }
    }

    void update(int l, int r, int val) {
        function<void(int, int, int, int, int, int)> update = [&](int ql, int qr, int val, int i, int l, int r) {
            if (ql > r or qr < l)
                return;
            if (ql <= l and r <= qr) {
                
                return;
            }
            push(i, l, r);
            int mid = l + (r - l) / 2;
            update(ql, qr, val, i << 1, l, mid);
            update(ql, qr, val, i << 1 | 1, mid + 1, r);

            t[i] = f(t[i << 1], t[i << 1 | 1]);
        };
        update(l, r, val, 1, 0, n - 1);
    }

    T query(int l, int r) {
        function<T(int, int, int, int, int)> query = [&](int ql, int qr, int i, int l, int r) {
            if (ql > r or qr < l)
                return T();
            if (ql <= l and r <= qr)
                return t[i];
            push(i, l, r);
            int mid = l + (r - l) / 2;
            T x = query(ql, qr, i << 1, l, mid), y = query(ql, qr, i << 1 | 1, mid + 1, r);
            return f(x, y);
        };
        return query(l, r, 1, 0, n - 1);
    }
};
